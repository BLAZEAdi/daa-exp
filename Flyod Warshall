#include <stdio.h>
#include <limits.h>
#define MAX_V 10
void printSolution(int dist[MAX_V][MAX_V], int V);
void floydWarshall(int graph[MAX_V][MAX_V], int V) {
 int dist[MAX_V][MAX_V], i, j, k;
 for (i = 0; i < V; i++) {
 for (j = 0; j < V; j++) {
 dist[i][j] = graph[i][j];
 }
 }
 for (k = 0; k < V; k++) {
 for (i = 0; i < V; i++) {
 for (j = 0; j < V; j++) {
 if (dist[i][k] != INT_MAX && dist[k][j] != INT_MAX &&
 dist[i][j] > dist[i][k] + dist[k][j]) {
 dist[i][j] = dist[i][k] + dist[k][j];
 }
 }
 }
 }
 printSolution(dist, V);
}
void printSolution(int dist[MAX_V][MAX_V], int V) {
 printf("The following matrix shows the shortest distances between every pair of vertices:\n");
 for (int i = 0; i < V; i++) {
 for (int j = 0; j < V; j++) {
 if (dist[i][j] == INT_MAX)
 printf("%7s", "INF");
 else
 printf("%7d", dist[i][j]);
 }
 printf("\n");
 }
}
int main() {
 int graph[MAX_V][MAX_V];
 int V;
 printf("Enter the number of vertices (max %d): ", MAX_V);
 scanf("%d", &V);
 printf("Enter the adjacency matrix (use -1 for INF, except for diagonal elements):\n");
 for (int i = 0; i < V; i++) {
 for (int j = 0; j < V; j++) {
 scanf("%d", &graph[i][j]);
 if (graph[i][j] == -1 && i != j) {
 graph[i][j] = INT_MAX; // No path
 }
 }
 }
 floydWarshall(graph, V);
 return 0;
} 
